#version 450 core


#define BOUNCES 5
#define RAYS_PER_PIXEL 1

struct Ray{
    vec3 ro;
    vec3 rd;
};
struct Material{
    vec3 diffuseCol; // 12
    float emissiveStrength; // 4
    float roughness;
};
struct HitInfo{
    bool hit;
    float dist;
    vec3 pos;
    vec3 normal;
    Material material;
};
struct Sphere {
                        // base alignment   // aligned offset
    vec3 pos;           // 12               // 0
    float rad;          // 4               // 12
    Material material;  // 16               // 16
};// 32 bytes total after auto padding


layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout (std430, binding = 1)  readonly buffer ssbo{
    Sphere[] spheres;
};
uniform int numSpheres;
uniform float time;
uniform int frame;

float hash(vec3 p) {
    return fract(sin(dot(p, vec3(127.1, 311.7, 74.7))) * 43758.5453123);
}

// Function to generate a random vec3 between -0.5 and 0.5
vec3 randomVec3(vec3 seed) {
    return vec3(hash(seed + vec3(1.0, 0.0, 0.0)),
                hash(seed + vec3(0.0, 1.0, 0.0)),
                hash(seed + vec3(0.0, 0.0, 1.0))) - 0.5;
}

HitInfo raySphereIntersect(Ray ray, Sphere sph) {
    HitInfo hi;
    hi.hit = false;
    float a = dot(ray.rd, ray.rd);
    vec3 s0_r0 = ray.ro - sph.pos;
    float b = 2.0 * dot(ray.rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sph.rad * sph.rad);

    if (b*b - 4.0*a*c < 0.0) {
        return hi;
    }

    // distance to sphere
    float t = (-b - sqrt((b*b) - 4.0*a*c))/(2.0*a);

    if(t > 0){
        hi.hit = true;
        hi.dist = t;
        hi.pos = ray.ro + ray.rd * t;
        hi.normal = normalize(hi.pos - sph.pos);
        hi.material = sph.material;
    }
    return hi;
}

HitInfo intersects(Ray ray){
    HitInfo hi;
    hi.hit = false;

    for(int i = 0; i < numSpheres; i++){
        HitInfo sphereHi = raySphereIntersect(ray, spheres[i]);
        if(sphereHi.hit && (!hi.hit || sphereHi.dist < hi.dist)){
            hi = sphereHi;
        }
    }

    return hi;
}

vec3 trace(Ray ray, inout vec3 seed){
    vec3 col = vec3(1.);
    vec3 incomingLight = vec3(0.);

    for(int i = 0; i < BOUNCES; i++){
        HitInfo hi = intersects(ray);
        if(!hi.hit){
            vec3 skyColor = vec3(0.7, 0.8, 0.92);
            incomingLight += skyColor * col;
            incomingLight = clamp(incomingLight, 0.0, 1.0);
            col *= skyColor;
            break;
        }
        // we assumed that emissiveCol is the same as diffuseCol for the emissive sphere
        //                    emitted light                                 the lights will be tinted by all the objects
        //                                                                  that have been hit so far (explaing the * col)
        incomingLight += (hi.material.diffuseCol * hi.material.emissiveStrength) * col;
        incomingLight = clamp(incomingLight, 0.0, 1.0);
        col *= hi.material.diffuseCol;


        Ray newRay;
        newRay.ro = hi.pos + hi.normal * 0.001;
        vec3 diffuseDir = normalize(hi.normal + randomVec3(seed));
        vec3 reflectionDir = reflect(ray.rd, hi.normal);
        newRay.rd = mix(reflectionDir, diffuseDir, hi.material.roughness );


        ray = newRay;
    }

    return incomingLight;
}



void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    // Here gl_NumWorkGroups is basically resolution
    vec2 uv;
    uv.x = (float(texelCoord.x) - .5*gl_NumWorkGroups.x);
    uv.y = (float(texelCoord.y) - .5*gl_NumWorkGroups.y);
    uv /= gl_NumWorkGroups.y;

    vec3 seed = vec3(uv, time);

    Ray cam;
    cam.ro  = vec3(0.0, 0.5, -2.0);
    cam.rd = vec3(uv.x, uv.y - 0.1, 1.3);

    vec3 col = trace(cam, seed);

    float weight = 1.0 / (frame + 1);
    vec3 colPrev = imageLoad(imgOutput, texelCoord).rgb;
    vec3 finalCol = clamp(colPrev * (1 - weight) + col * weight, 0.0, 1.0);

    imageStore(imgOutput, texelCoord, vec4(finalCol, 1.0));
}
#version 450 core

#define PI 3.14159265359f

struct Vertex {
    vec3 position;
    vec3 normal;
};

struct Material {
    vec3 diffuseCol; // 12
    float emissiveStrength; // 4
    float roughness; // 4
    float specularPerc; // 4
}; // 32 bytes with the padding[2]

struct Ray {
    vec3 ro;
    vec3 rd;
};

struct Sphere {
    // base alignment   // aligned offset
    vec3 pos;           // 12               // 0
    float rad;          // 4               // 12
    Material material;  // 32               // 16
};                      // 48 bytes

struct Triangle {
    Vertex v0;
    Vertex v1;
    Vertex v2;
    vec3 centroid_;
    int matIndex;
};                      // 32*3 + 12 + 4 = 112 bytes total

struct Node {
    vec3 aabbMin;
    uint leftChild;
    vec3 aabbMax;
    uint rightChild;
    uint firstPrim;
    uint primCount;
    int hitLink;
    int missLink;
}; // 48 bytes

struct HitInfo {
    bool hit;
    float dist;
    vec3 pos;
    vec3 normal;
    Material material;
    Triangle tri;
    bool isTriangle;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOutput;

layout (std430, binding = 1) readonly buffer spheresBuffer {
    Sphere[] spheres;
};
layout (std430, binding = 2) readonly buffer trianglesBuffer {
    Triangle[] triangles;
};
layout (std430, binding = 3) readonly buffer nodesBuffer {
    Node[] nodes;
};
layout (std430, binding = 4) readonly buffer materialsBuffer {
    Material[] materials;
};

uniform samplerCube skybox;
// Render uniforms
uniform int u_frame;
uniform int u_bounces;
uniform int u_samples;
uniform float u_jitter;
// Cam uniforms
uniform vec3 camPos;
uniform mat4 invView;
uniform mat4 invProjection;
// Geometries uniform
uniform int u_nSpheres;
uniform int u_nTriangles;


// ========= RANDOM FUNCTIONS =========
uint wang_hash(inout uint seed) {
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float randomFloat01(inout uint state) {
    return float(wang_hash(state)) / 4294967296.0;
}

vec3 randomUnitVector(inout uint state) {
    float z = randomFloat01(state) * 2.0f - 1.0f;
    float a = randomFloat01(state) * 2.0 * PI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}
// ====================================


// ========= RAY SURFACE =========
HitInfo raySphereIntersect(Ray ray, Sphere sph) {
    HitInfo hi;
    hi.hit = false;
    float a = dot(ray.rd, ray.rd);
    vec3 s0_r0 = ray.ro - sph.pos;
    float b = 2.0 * dot(ray.rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sph.rad * sph.rad);

    if (b * b - 4.0 * a * c < 0.0) {
        return hi;
    }
    // distance to sphere
    float t = (-b - sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);

    if (t > 0) {
        hi.hit = true;
        hi.dist = t;
        hi.pos = ray.ro + ray.rd * t;
        hi.normal = normalize(hi.pos - sph.pos);
        hi.material = sph.material;
    }
    return hi;
}

HitInfo rayTriangleIntersect(Ray ray, Triangle tri) {
    HitInfo hi;
    hi.hit = false;
    hi.dist = -1.0;

    vec3 v1v0 = tri.v1.position - tri.v0.position;
    vec3 v2v0 = tri.v2.position - tri.v0.position;
    vec3 rov0 = ray.ro - tri.v0.position;
    vec3 n = cross(v1v0, v2v0);

    vec3 q = cross(rov0, ray.rd);
    float d = 1.0 / dot(ray.rd, n);
    float u = d * dot(-q, v2v0);
    float v = d * dot(q, v1v0);
    float t = d * dot(-n, rov0);

    if (u >= 0.0 && v >= 0.0 && (u + v) <= 1.0 && t > 0.0) {
        hi.hit = true;
        hi.dist = t;
        hi.pos = ray.ro + ray.rd * t;
        if (dot(n, ray.rd) > 0.0) {
            n = -n;  // Flip the normal if it's not facing the ray origin
        }
        hi.normal = normalize(n);
        hi.material = materials[tri.matIndex];
    }

    return hi;
}

float rayAABBIntersect(Ray ray, vec3 bmin, vec3 bmax) {
    float tx1 = (bmin.x - ray.ro.x) / ray.rd.x;
    float tx2 = (bmax.x - ray.ro.x) / ray.rd.x;
    float tmin = min(tx1, tx2);
    float tmax = max(tx1, tx2);
    float ty1 = (bmin.y - ray.ro.y) / ray.rd.y;
    float ty2 = (bmax.y - ray.ro.y) / ray.rd.y;
    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));
    float tz1 = (bmin.z - ray.ro.z) / ray.rd.z;
    float tz2 = (bmax.z - ray.ro.z) / ray.rd.z;
    tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));
    bool hit = tmax >= tmin && tmax > 0;
    return hit ? tmin : 1e10;
}

HitInfo rayPlaIntersect(Ray ray, in vec4 p )
{
    HitInfo hi;
    hi.hit = false;
    hi.isTriangle = false;

    float denom = -(dot(ray.ro,p.xyz)+p.w)/dot(ray.rd,p.xyz);

    if(denom > 0.0){
        hi.pos = ray.ro + denom * ray.rd;
        hi.dist = denom;
        hi.normal = p.xyz;
        hi.hit = true;
    }
    return hi;
}

vec3 calculateBarycentric(vec3 pos, vec3 a, vec3 b, vec3 c)
{
    vec3 v0 = b - a; vec3 v1 = c - a; vec3 v2 = pos - a;
    float d00 = dot(v0, v0);
    float d01 = dot(v0, v1);
    float d11 = dot(v1, v1);
    float d20 = dot(v2, v0);
    float d21 = dot(v2, v1);
    float denom = d00 * d11 - d01 * d01;
    vec3 bar;
    bar.y = (d11 * d20 - d01 * d21) / denom;
    bar.z = (d00 * d21 - d01 * d20) / denom;
    bar.x = 1.0f - bar.y - bar.z;
    return bar;
}
// ====================================


HitInfo intersects(Ray ray) {
    HitInfo hi;
    hi.dist = 1e10;
    hi.hit = false;


    for (int i = 0; i < u_nSpheres; i++) {
        HitInfo sphereHi = raySphereIntersect(ray, spheres[i]);
        if (sphereHi.hit && (!hi.hit || sphereHi.dist < hi.dist)) {
            hi = sphereHi;
        }
    }

//    HitInfo planeHi = rayPlaIntersect(ray, vec4(0.0, 1.0, 0.0, 0.0));
//    if(planeHi.hit && (!hi.hit || planeHi.dist < hi.dist)) {
//        planeHi.material = Material(vec3(1.0), 0.0, 0.5, 0.25);
//        hi = planeHi;
//    }


    // BVH
    uint currentNodeIndex = 0;
    while (currentNodeIndex != -1) {
        Node node = nodes[currentNodeIndex];
        if (rayAABBIntersect(ray, node.aabbMin, node.aabbMax) < hi.dist) {

            if (node.primCount > 0) {
                for (uint i = nodes[currentNodeIndex].firstPrim; i < nodes[currentNodeIndex].firstPrim + nodes[currentNodeIndex].primCount; i++) {
                    HitInfo triangleHi = rayTriangleIntersect(ray, triangles[i]);
                    if (triangleHi.hit && (!hi.hit || triangleHi.dist < hi.dist)) {
                        hi = triangleHi;
                        hi.tri = triangles[i];
                        hi.isTriangle = true;
                    }
                }
            }
            currentNodeIndex = node.hitLink;

        } else {
            currentNodeIndex = node.missLink;
        }
    }


    return hi;
}

vec3 trace(Ray ray, inout uint seed) {
    vec3 rayCol = vec3(1.);
    vec3 pixelColor = vec3(0.);

    for (int i = 0; i < u_bounces; i++) {
        HitInfo hi = intersects(ray);
        if (!hi.hit) {
            pixelColor += texture(skybox, ray.rd).rgb * 3.14 * clamp(i, 1, 1);
            break;
        }
        // we assumed that emissiveCol is the same as diffuseCol for the emissive objects (1 less mat component to share)
        //                    emitted light                                 the incomming light will be tinted by all the objects
        //                                                                  that have been hit so far (explaing the * col)
        pixelColor += (hi.material.diffuseCol * hi.material.emissiveStrength) * rayCol;
        rayCol *= hi.material.diffuseCol;

        // smooth shading
        if(hi.isTriangle){
            vec3 bar = calculateBarycentric(hi.pos, hi.tri.v0.position, hi.tri.v1.position, hi.tri.v2.position);
            hi.normal = bar.x * hi.tri.v0.normal + bar.y * hi.tri.v1.normal + bar.z * hi.tri.v2.normal;
        }

        Ray newRay;
        newRay.ro = hi.pos + hi.normal * 0.001;

        // roughness component
        // the bigger the roughness, the more the ray will be reflected in a diffuse manner
        // instead of following the specular direction
        vec3 diffuseDir = normalize(hi.normal + randomUnitVector(seed));
        vec3 specularReflectionDir = reflect(ray.rd, hi.normal);
        specularReflectionDir = normalize(mix(specularReflectionDir, diffuseDir, hi.material.roughness));

        // ~metallic component
        float shouldSpecular = (randomFloat01(seed) < hi.material.specularPerc) ? 1.0f : 0.0f;
        newRay.rd = normalize(mix(diffuseDir, specularReflectionDir, shouldSpecular));

        // early stoppage
        // https://blog.demofox.org/2020/06/06/casual-shadertoy-path-tracing-2-image-improvement-and-glossy-reflections/
        float p = max(rayCol.r, max(rayCol.g, rayCol.b));
        if (randomFloat01(seed) > p) {
            break;
        }
        // Add the energy we 'lose' by randomly terminating paths
        rayCol *= 1.0f / p;


        ray = newRay;
    }

    return pixelColor;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    // here gl_NumWorkGroups is basically resolution
    vec2 uv;
    uv.x = (float(texelCoord.x) - .5 * gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    uv.y = (float(texelCoord.y) - .5 * gl_NumWorkGroups.y * gl_WorkGroupSize.x);
    uv /= gl_WorkGroupSize.xy * gl_NumWorkGroups.xy;

    uint seed = uint(uint(texelCoord.x) * uint(1973) + uint(texelCoord.y) * uint(9277) + uint(u_frame) * uint(26699)) | uint(1);

    Ray cam;
    cam.ro = camPos;
    // apply the inv projection and view matrices to the classical RT ray direction
    vec4 target = invProjection * vec4(uv.x, uv.y, 1.0, 1.0);
    vec3 normalizedTarget = normalize(vec3(target) / target.w);
    cam.rd = vec3(invView * vec4(normalizedTarget, 0.0));

    vec3 col;
    // mulitple rays per pixel
    for (int i = 0; i < u_samples; i++) {
        Ray randomCam;
        randomCam.ro = cam.ro;
        randomCam.rd = normalize(cam.rd + u_jitter * randomUnitVector(seed));
        col += trace(randomCam, seed) / float(u_samples);
    }

    // accumulation
    vec3 colPrev = imageLoad(imgOutput, texelCoord).rgb;
    col = mix(colPrev, col, 1.0 / (float(u_frame) + 1));


    imageStore(imgOutput, texelCoord, vec4(col, 1.0));
}